rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Service account access for API - this rule takes precedence
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.token.firebase.sign_in_provider == 'custom';
    }
    
    // Public user profiles - accessible to all authenticated users
    match /public_users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow all authenticated users to read public data
    match /applications/{applicationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
                            (resource.data.employerId == request.auth.uid || 
                             resource.data.applicantId == request.auth.uid);
    }
    
    // User profiles
    match /users/{userId} {
      // Allow users to read and write only their own data
      // Also allow ANY authenticated user to read other user profiles
      // This simplifies permissions for employers viewing job seeker profiles
      allow read: if request.auth != null;
      
      // Only allow users to write their own data
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Job listings
    match /jobs/{jobId} {
      // Anyone authenticated can read job listings
      allow read: if request.auth != null;
      
      // Only employers can create job listings
      allow create: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == "employer" &&
                     request.resource.data.employerId == request.auth.uid;
      
      // Only the employer who created the job can update or delete it
      allow update, delete: if request.auth != null && 
                             resource.data.employerId == request.auth.uid;
    }
    
    // Chat messages
    match /chats/{chatId} {
      // Allow read if user is authenticated (simplify for now to fix permissions)
      allow read: if request.auth != null;
      
      // Allow create if user is authenticated
      allow create: if request.auth != null;
      
      // Allow update if user is a participant
      allow update: if request.auth != null && 
                     (resource.data.jobSeekerId == request.auth.uid || 
                      resource.data.employerId == request.auth.uid);
      
      // Allow delete if user is a participant
      allow delete: if request.auth != null && 
                     (resource.data.jobSeekerId == request.auth.uid || 
                      resource.data.employerId == request.auth.uid);
      
      // Chat messages subcollection
      match /messages/{messageId} {
        // Allow read for any authenticated user
        allow read: if request.auth != null;
        
        // Allow create for any authenticated user
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
        
        // Allow update for message creator only
        allow update: if request.auth != null && resource.data.senderId == request.auth.uid;
        
        // Allow delete for message creator only
        allow delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }
    }
    
    // Rules for listing chats
    match /chats/{document=**} {
      // Allow listing chats for any authenticated user
      allow list: if request.auth != null;
    }
    
    // Rules for public_chats collection - less restrictive for easier access
    match /public_chats/{chatId} {
      // Allow read/write for any authenticated user
      allow read, write: if request.auth != null;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
      }
    }
  }
}
